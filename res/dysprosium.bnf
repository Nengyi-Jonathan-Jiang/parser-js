program __EPSILON__
__CHAIN__ program := program file

file := module-declaration imports statements
module-declaration := module module-name ;

__WRAP__ module-name := IDENTIFIER
__CHAIN__ module-name := module-name . IDENTIFIER

imports __EPSILON__
__CHAIN__ imports := imports import

import := using import-clause ;

import-clause := module-import-clause
import-clause := aliased-module-import-clause
import-clause := wildcard-import-clause
import-clause := specific-import-clause

module-import-clause := module-name
aliased-module-import-clause := module-name as module-name
wildcard-import-clause := * from module-name
specific-import-clause := { import-list } from module-name

__WRAP__ import-list := specific-import
__CHAIN__ import-list := import-list , specific-import

specific-import := simple-specific-import
specific-import := aliased-specific-import

simple-specific-import := IDENTIFIER
aliased-specific-import := IDENTIFIER as IDENTIFIER

statements __EPSILON__
__CHAIN__ statements := statements statement

__DUMMY__ __EPSILON__

statement := print-statement
statement := block-statement
statement := return-statement
statement := expression-statement
statement := declaration
statement := class-declaration
statement := if-statement
statement := if-else-statement
statement := loop
statement := loop-else
statement := loop-exit-statement
statement := nothing-statement
statement := export-statement

declaration := function-declaration
declaration := variable-declaration
declaration := variable-initialization
declaration := class-declaration

export-statement := export declaration

nothing-statement := nothing ;

type := non-void-type
type := void

__WRAP__ raw-type := IDENTIFIER
raw-type := template
template := raw-type < template-params >
template-params := type
__CHAIN__ template-params := template-params , type
non-void-type := raw-type
non-void-type := # non-void-type

if-else-statement := if-statement else-clause

if-statement := if ( expr ) statement
else-clause := else statement

loop-exit := break
loop-exit := continue
loop-exit-statement := loop-exit ;
loop-exit-statement := loop-exit INT-LITERAL ;

loop-else := loop else-clause

loop := while-loop
loop := until-loop
loop := for-loop
loop := foreach-loop

while-loop := while ( expr ) loop-body
until-loop := until ( expr ) loop-body

loop-body := statement __DUMMY__

for-loop := for ( variable-initialization expr ; expr ) statement

expression-statement := expr ;
return-statement := return expr ;
block-statement := { statements }

print-statement := print expr ;
print-statement := println expr ;
print-statement := print STRING-LITERAL ;
print-statement := println STRING-LITERAL ;

variable-initialization := const IDENTIFIER : non-void-type = expr ;
variable-declaration := const IDENTIFIER  : non-void-type ;
variable-initialization := var IDENTIFIER : non-void-type = expr ;
variable-declaration := var IDENTIFIER  : non-void-type ;

class-declaration := class IDENTIFIER { class-body }

__CHAIN__ class-body := class-body class-body-statement
class-body __EPSILON__

class-body-statement := visibility-modifier declaration
class-body-statement := visibility-modifier static declaration
class-body-statement := constructor parameter-list block-statement

visibility-modifier := public
visibility-modifier := private
visibility-modifier := protected

op := =
op := +=
op := -=
op := *=
op := /=
op := %=
op := <=
op := <
op := >=
op := >
op := ==
op := !=
op := +
op := -
op := *
op := /
op := %

expr := postfix-expr
__CHAIN__ expr := expr op postfix-expr

postfix-expr := primary-expr
postfix-expr := postfix-expr postfix-op
postfix-expr := call-expr
postfix-expr := index-expr
postfix-expr := access-expr

postfix-op := --
postfix-op := ++

call-expr := postfix-expr ( )
call-expr := postfix-expr ( argument-list )
index-expr := postfix-expr [ argument-list ]
argument-list := expr
__CHAIN__ argument-list := argument-list , argument
__WRAP__ argument-list := argument
__WRAP__ argument := expr

access-expr := postfix-expr . IDENTIFIER

primary-expr := INT-LITERAL
primary-expr := FLOAT-LITERAL
primary-expr := IDENTIFIER
primary-expr := ( expr )
primary-expr := input-expr
primary-expr := new-expr

new-expr := new IDENTIFIER ( argument-list )

input-expr := input type

function-declaration := func IDENTIFIER parameter-list -> return type expr ;
function-declaration := func IDENTIFIER parameter-list -> type block-statement
parameter-list := ( )
parameter-list := ( parameters )

__WRAP__ parameters := parameter
__CHAIN__ parameters := parameters , parameter

parameter := IDENTIFIER : non-void-type
parameter := & IDENTIFIER : non-void-type
parameter := var IDENTIFIER : non-void-type
parameter := var & IDENTIFIER : non-void-type