op := =
op := +=
op := -=
op := *=
op := /=
op := %=
op := <=
op := <
op := >=
op := >
op := ==
op := !=
op := +
op := -
op := *
op := /
op := %

expr := prefix-expr
expr := new-expr
__CHAIN__ expr := expr op prefix-expr

prefix-expr := address-of
prefix-expr := dereference
postfix-expr := pre-increment
postfix-expr := pre-decrement
prefix-expr := postfix-expr


address-of := # prefix-expr
dereference := @ prefix-expr

pre-increment := ++ prefix-expr
pre-decrement := -- prefix-expr

postfix-expr := post-increment
postfix-expr := post-decrement
postfix-expr := call-expr
postfix-expr := index-expr
postfix-expr := access-expr
postfix-expr := primary-expr

post-increment := postfix-expr ++
post-decrement := postfix-expr --

call-expr := postfix-expr ( optional-argument-list )
index-expr := postfix-expr [ argument-list ]

optional-argument-list __EPSILON__
optional-argument-list := argument-list

__CHAIN__ argument-list := argument-list , argument
__WRAP__ argument-list := argument

__WRAP__ argument := expr

access-expr := postfix-expr . IDENTIFIER

primary-expr := INT-LITERAL
primary-expr := FLOAT-LITERAL
primary-expr := CHAR-LITERAL
primary-expr := BOOL-LITERAL
primary-expr := STRING-LITERAL
primary-expr := null

primary-expr := IDENTIFIER
primary-expr := ( expr )
primary-expr := input-expr

new-operator := new
new-operator := new`
new-operator := new$

new-default-expr := new-operator constructible-type

new-expr := new-default-expr
new-expr := new-operator basic-type ( optional-argument-list )

input-expr := input type