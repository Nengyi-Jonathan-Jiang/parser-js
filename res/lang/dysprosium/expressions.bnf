expr := prefix-expr
expr := new-expr
__CHAIN__ expr := expr op prefix-expr

op := =
op := +=
op := -=
op := *=
op := /=
op := %=
op := <=
op := <
op := >=
op := >
op := ==
op := !=
op := +
op := -
op := *
op := /
op := %

address-of := # prefix-expr
dereference := @ prefix-expr

prefix-expr := address-of
prefix-expr := dereference
prefix-expr := postfix-expr

postfix-expr := primary-expr
postfix-expr := postfix-expr postfix-op
postfix-expr := call-expr
postfix-expr := index-expr
postfix-expr := access-expr

postfix-op := --
postfix-op := ++

call-expr := postfix-expr ( optional-argument-list )
index-expr := postfix-expr [ argument-list ]

optional-argument-list __EPSILON__
optional-argument-list := argument-list

__CHAIN__ argument-list := argument-list , argument
__WRAP__ argument-list := argument

__WRAP__ argument := expr

access-expr := postfix-expr . IDENTIFIER

primary-expr := INT-LITERAL
primary-expr := FLOAT-LITERAL
primary-expr := CHAR-LITERAL
primary-expr := BOOL-LITERAL
primary-expr := STRING-LITERAL
primary-expr := null

primary-expr := IDENTIFIER
primary-expr := ( expr )
primary-expr := input-expr

new-expr := new constructible-type
new-expr := new* constructible-type
new-expr := new$ constructible-type

new-expr := new basic-type ( optional-argument-list )
new-expr := new* basic-type ( optional-argument-list )
new-expr := new$ basic-type ( optional-argument-list )

input-expr := input type